(()=>{"use strict";var e={260:(e,t,a)=>{a.r(t),a.d(t,{default:()=>i});const i={colderGray:"#8cb2c6",coldGray:"#979ea1",darkBlue:"#1f273c",darkerBlue:"#495c67",darkerGreen:"#080",darkGreen:"#0a0",darkRed:"#a00",darkYellow:"#aa2",fuxian:"#f0f",gray:"#888",grayRed:"#a88",green:"#0a3",lightBlue:"#0cf",lighterLime:"#afa",lighterRed:"#f88",lighterYellow:"#ffa",lightestGray:"#ddd",lightGray:"#aaa",lightLime:"#8f8",lightOrange:"#fca",lightPastelRed:"#fa9",lightPurple:"#9ac",lightRed:"#f44",lightTeal:"#0fa",lightYellow:"#ddc275",lime:"#3f3",navyBlue:"#1a2032",orange:"#fa0",pastelRed:"#faa",red:"red",teal:"#0a9",turqoise:"aqua",white:"#fff",yellow:"#ff0",ui_allowed:"#fff",ui_background:"#1a2032",ui_disallowed:"#f88",ui_door:"#ddc275",ui_game_saved:"#0fa",ui_healed:"#8f8",ui_hp_10_percent:"#f44",ui_hp_25_percent:"#f44",ui_hp_50_percent:"#faa",ui_hp_95_percent:"#aaa",ui_hp_max:"#afa",ui_info:"#979ea1",ui_inventory_full:"red",ui_level_up:"#ff0",ui_map_background:"#1f273c",ui_menu_border:"#aaa",ui_menu_cursor:"#aaa",ui_picked_up:"#aaa",ui_tempImage:"#3f3",ui_text:"#8cb2c6",ui_version:"#fff",ui_wall_dark:"#495c67",ui_wall:"#8cb2c6",pickup_armor_item:"#9ac",pickup_healthpotion:"#f0f",pickup_nutellabun:"#ddc275",pickup_scroll_of_confusion:"#ffa",pickup_scroll_of_fireball:"#fa0",pickup_scroll_of_lightning:"aqua",pickup_scroll_of_map:"#aa2",pickup_weapon_item:"#3f3",actor_hero:"#fff",actor_stairs:"#fff",monster_bat:"#888",monster_ghoul:"#0a9",monster_giant_rat:"#888",monster_jackal:"#888",monster_kobold:"#a88",monster_lizard:"#0a3",monster_org:"#0a0",monster_rat:"#888",monster_troll:"#080",log_dead_body:"#a00",log_default_text:"#aaa",log_defeat:"#a00",log_enemy_attack:"#aaa",log_hilight_text:"#fff",log_player_attack:"#ddd",default_item:"#f0f",default_monster:"#f0f"}},850:(e,t,a)=>{a.r(t)},886:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default=[{name:"leather armor",ac:11,armorType:"light",weight:10},{name:"studded leather",ac:12,armorType:"light",weight:13},{name:"hide",ac:12,armorType:"medium",weight:12},{name:"chain shirt",ac:13,armorType:"medium",weight:20},{name:"scale mail",ac:14,armorType:"medium",weight:45},{name:"breastplate",ac:14,armorType:"medium",weight:20},{name:"half plate",ac:15,armorType:"medium",weight:40},{name:"ringmail",ac:14,armorType:"heavy",weight:40},{name:"chain mail",ac:16,armorType:"heavy",weight:55},{name:"splint",ac:17,armorType:"heavy",weight:60},{name:"plate",ac:18,armorType:"heavy",weight:65},{name:"shield",ac:2,armorType:"shield",weight:6}]},391:function(e,t,a){var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const s=i(a(260));t.default=[{name:"health potion",message:"gulp gulp gulp...",ch:"!",color:s.default.pickup_healthpotion,weight:.1,selector:{type:"none",range:0},effect:{type:"health",amount:4}},{name:"nutella bun",message:"omnomnom...",ch:"@",color:s.default.pickup_nutellabun,weight:.1,selector:{type:"none",range:0},effect:{type:"health",amount:30}},{name:"scroll of fireball",message:"Everything burns",ch:"#",color:s.default.pickup_scroll_of_fireball,weight:.05,selector:{type:"selected range",range:3},effect:{type:"health",amount:-12}},{name:"scroll of confusion",message:"confused af",ch:"#",color:s.default.pickup_scroll_of_confusion,weight:.05,selector:{type:"selected monster",range:5},effect:{type:"change ai",amount:10}},{name:"scroll of map",message:"All is clear!",ch:"#",color:s.default.pickup_scroll_of_map,weight:.05,selector:{type:"none",range:0},effect:{type:"map clear",amount:0}},{name:"scroll of lighting bolt",message:"A lighting bolt strikes!",ch:"#",color:s.default.pickup_scroll_of_lightning,weight:.05,selector:{type:"closest monster",range:5},effect:{type:"health",amount:-20}}]},47:function(e,t,a){var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const s=i(a(260));t.default=[{name:"bat","size:":"tiny",type:"beast",ch:"b",color:s.default.monster_bat,hp:1,ac:12,xp:5,abilities:{str:2,dex:15,con:8,int:2,wis:12},attacks:[{name:"bite",damage:"1d1",damageType:"piercing"}]},{name:"jackal","size:":"small",type:"beast",ch:"j",color:s.default.monster_jackal,hp:3,ac:12,xp:10,abilities:{str:8,dex:15,con:11,int:3,wis:12},attacks:[{name:"bite",damage:"1d4",damageType:"piercing"}]},{name:"lizard","size:":"tiny",type:"beast",ch:"l",color:s.default.monster_lizard,hp:2,ac:10,xp:10,abilities:{str:2,dex:11,con:10,int:1,wis:8},attacks:[{name:"bite",damage:"1d1",damageType:"piercing"}]},{name:"kobold","size:":"small",type:"humanoid",ch:"k",color:s.default.monster_kobold,hp:5,ac:12,xp:25,abilities:{str:7,dex:15,con:9,int:8,wis:7},attacks:[{name:"dagger",damage:"1d4",damageType:"piercing"},{name:"sling",damage:"1d4",damageType:"bludgeoning"}]},{name:"rat","size:":"tiny",type:"beast",ch:"r",color:s.default.monster_rat,hp:1,ac:10,xp:5,abilities:{str:2,dex:11,con:9,int:2,wis:10},attacks:[{name:"bite",damage:"1d1",damageType:"piercing"}]},{name:"giant rat","size:":"small",type:"beast",ch:"R",color:s.default.monster_giant_rat,hp:7,ac:12,xp:25,abilities:{str:7,dex:15,con:11,int:2,wis:10},attacks:[{name:"bite",damage:"1d4",damageType:"piercing"}]},{name:"ghoul",size:"medium",type:"undead",ch:"G",color:s.default.monster_ghoul,hp:22,ac:12,xp:200,abilities:{str:13,dex:15,con:10,int:7,wis:10},attacks:[{name:"bite",damage:"2d6",damageType:"piercing"},{name:"claws",damage:"2d4",damageType:"slashing"}]},{name:"orc",size:"medium",type:"humanoid",ch:"o",color:s.default.monster_orc,hp:15,ac:13,xp:100,abilities:{str:16,dex:12,con:16,int:7,wis:11},attacks:[{name:"greataxe",damage:"1d12",damageType:"slashing"},{name:"javelin",damage:"1d6",damageType:"piercing"}]},{name:"troll",size:"large",type:"giant",ch:"t",color:s.default.monster_troll,hp:84,ac:15,xp:1800,abilities:{str:18,dex:13,con:20,int:7,wis:9},attacks:[{name:"bite",damage:"1d16",damageType:"piercing"},{name:"claw",damage:"2d6",damageType:"slashing"}]}]},204:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default=[{name:"club",damage:"1d4",damageType:"bludgeoning",weight:2,wearableType:"one-handed"},{name:"dagger",damage:"1d4",damageType:"piercing",weight:1,wearableType:"one-handed"},{name:"greatclub",damage:"1d4",damageType:"bludgeoning",weight:10,wearableType:"two-handed"},{name:"handaxe",damage:"1d6",damageType:"slashing",weight:2,wearableType:"one-handed"},{name:"javelin",damage:"1d6",damageType:"piercing",weight:2,wearableType:"one-handed"},{name:"light hammer",damage:"1d4",damageType:"bludgeoning",weight:2,wearableType:"one-handed"},{name:"mace",damage:"1d6",damageType:"bludgeoning",weight:4,wearableType:"one-handed"},{name:"quarterstaff",damage:"1d6",damageType:"bludgeoning",weight:4,wearableType:"one-handed"},{name:"spear",damage:"1d6",damageType:"piercing",weight:3,wearableType:"one-handed"}]},607:function(e,t,a){var i=this&&this.__awaiter||function(e,t,a,i){return new(a||(a=Promise))((function(s,r){function o(e){try{l(i.next(e))}catch(e){r(e)}}function n(e){try{l(i.throw(e))}catch(e){r(e)}}function l(e){var t;e.done?s(e.value):(t=e.value,t instanceof a?t:new a((function(e){e(t)}))).then(o,n)}l((i=i.apply(e,t||[])).next())}))},s=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.game=t.GameStatus=void 0,a(850);const r=s(a(801)),o=s(a(927)),n=a(382),l=s(a(423)),d=a(84),c=s(a(135)),h=a(557),u=s(a(529)),m=s(a(808)),f=a(792),p=a(107),g=a(928),y=a(409),v=s(a(5)),_=a(865);var w;!function(e){e[e.STARTUP=0]="STARTUP",e[e.IDLE=1]="IDLE",e[e.NEW_TURN=2]="NEW_TURN",e[e.VICTORY=3]="VICTORY",e[e.DEFEAT=4]="DEFEAT"}(w=t.GameStatus||(t.GameStatus={})),t.game=new class{constructor(){this.gameStatus=w.STARTUP,this.masterSeed=0,this.turns=0,this.mapx=80,this.mapy=80,this.canvas=(0,g.ensure)(document.querySelector("#screen")),this.ctx=(0,g.ensure)(this.canvas.getContext("2d")),this.ctx.font="12px system-ui",this.fontSize=12,this.ctx.textAlign="center",this.log=new v.default,this.lastKey="",this.depth=0,this.turns=0,this.width=80,this.height=40,this.actors=[],this.map=new l.default(this.mapx,this.mapy),this.camera=new d.Camera,this.camera.setCenter(this.width,this.height);const e=(0,g.ensure)(document.querySelector("#temp-image"));e.addEventListener("click",(()=>{e.classList.toggle("zoomed")}))}term(){return i(this,void 0,void 0,(function*(){this.log=new v.default,this.actors=[],this.map=new l.default(this.mapx,this.mapy),this.player=void 0}))}init(e,t=!0){var a;return i(this,void 0,void 0,(function*(){if((0,g.ensure)(this.map).generate(e,this.masterSeed,this.depth),e){let e=0;t&&(e=this.actors.push(new m.default(2,2,"@","hero",y.Colors.HERO))-1,this.player=this.actors[e],this.player.destructible=new p.PlayerDestructible(30,2,"your cadaver"),this.player.attacker=new u.default("1d4"),this.player.ai=new f.PlayerAI,this.player.abilities=new h.Abilities(18,15,10,8,12),this.player.container=new r.default(26),this.player.equipments=new o.default,this.player.fov=new c.default(this.mapx,this.mapy)),(0,g.ensure)(this.player).x=(0,g.ensure)(this.map).startX,(0,g.ensure)(this.player).y=(0,g.ensure)(this.map).startY,null===(a=(0,g.ensure)(this.player).fov)||void 0===a||a.fullClear(),e=this.actors.push(new m.default(0,0,">","stairs",y.Colors.STAIRS))-1,this.stairs=this.actors[e],this.stairs.blocks=!1,this.stairs.fovOnly=!1,this.stairs.x=(0,g.ensure)(this.map).stairsX,this.stairs.y=(0,g.ensure)(this.map).stairsY,this.sendToBack(this.stairs),this.log.add("Welcome stranger!");const i=(0,n.createItem)({name:"leather armor",x:(0,g.ensure)(this.player).x,y:(0,g.ensure)(this.player).y}),s=(0,n.createItem)({name:"hide",x:(0,g.ensure)(this.player).x+1,y:(0,g.ensure)(this.player).y}),l=(0,n.createItem)({name:"handaxe",x:(0,g.ensure)(this.player).x-1,y:(0,g.ensure)(this.player).y});this.actors.push(i),this.actors.push(s),this.actors.push(l)}else this.log.add("Welcome back stranger!");this.gameStatus=w.STARTUP}))}nextLevel(){return i(this,void 0,void 0,(function*(){this.depth++,this.log.add("You take steps down."),this.map=void 0,this.stairs=void 0;const e=this.player;this.actors=Array(),this.map=new l.default(this.mapx,this.mapy),this.init(!0,!1),this.actors.push(e),this.save()}))}newGame(){return i(this,void 0,void 0,(function*(){this.masterSeed=(0,g.float2int)(134217727*Math.random()),this.turns=0,this.depth=1,yield this.term(),yield this.init(!0,!0),yield this.save()}))}continueGame(){return i(this,void 0,void 0,(function*(){if(null!==window.localStorage.getItem("seed")){null===window.localStorage.getItem("version")&&window.localStorage.setItem("version","v0.0.1.12a"),this.masterSeed=parseInt((0,g.ensure)(window.localStorage.getItem("seed"))),this.depth=parseInt((0,g.ensure)(window.localStorage.getItem("depth"))),this.turns=parseInt((0,g.ensure)(window.localStorage.getItem("turns"))),yield this.init(!1);const e=JSON.parse(window.localStorage.getItem("actors")||"[]");for(const t of e){const e=this.actors.push(new m.default(t.x,t.y,t.ch,t.name,t.color))-1;if(t.fov&&(this.actors[e].fov=new c.default(this.mapx,this.mapy),(0,g.ensure)(this.actors[e].fov).mapped=t.fov.mapped),t.container){this.actors[e].container=yield new r.default(26);for(const a of t.container.inventory){const t=(0,g.ensure)(this.actors[e].container).inventory.push(new m.default(a.x,a.y,a.ch,a.name,a.color))-1;(0,g.ensure)(this.actors[e].container).inventory[t]=(0,n.createItem)({name:a.name,x:a.x,y:a.y})}}if(t.equipments){this.actors[e].equipments=new o.default;for(const a of t.equipments.items)(0,g.ensure)(this.actors[e].equipments).add((0,n.createItem)({name:a.name,x:a.x,y:a.y}))}if(t.abilities){const a=t.abilities;this.actors[e].abilities=new h.Abilities(a.str,a.dex,a.con,a.int,a.wis)}t.attacker&&(this.actors[e].attacker=new u.default(t.attacker.power)),t.pickable&&(t.armor||t.weapon?this.actors[e]=(0,n.createItem)({name:t.name,x:t.x,y:t.y}):this.actors[e].create(t)),"stairs"===t.name&&(this.stairs=this.actors[e],this.stairs.fovOnly=!1),"door"===t.name&&(this.actors[e].blocks=t.blocks),t.destructible&&("player"===t.destructible.type&&(this.player=this.actors[e],this.actors[e].destructible=new p.PlayerDestructible(30,2,"player corpse"),this.actors[e].ai=new f.PlayerAI,(0,g.ensure)(this.actors[e].destructible).xp=t.destructible.xp,(0,g.ensure)(this.actors[e].destructible).hp=t.destructible.hp,(0,g.ensure)(this.actors[e].destructible).maxHP=t.destructible.maxHP,(0,g.ensure)(this.actors[e].destructible).defense=t.destructible.defense,(0,g.ensure)(this.actors[e].destructible).corpseName=t.destructible.corpseName),"monster"===t.destructible.type&&(this.actors[e].destructible=new p.MonsterDestructible(1,1,"monster corpse",0),(0,g.ensure)(this.actors[e].destructible).xp=t.destructible.xp,(0,g.ensure)(this.actors[e].destructible).hp=t.destructible.hp,(0,g.ensure)(this.actors[e].destructible).maxHP=t.destructible.maxHP,(0,g.ensure)(this.actors[e].destructible).defense=t.destructible.defense,(0,g.ensure)(this.actors[e].destructible).corpseName=t.destructible.corpseName,this.actors[e].ai=new f.MonsterAI))}}}))}load(){return i(this,void 0,void 0,(function*(){"v0.0.1.12a"!==window.localStorage.getItem("version")&&window.localStorage.clear(),this.menu=new _.Menu,this.menu.clear(),window.localStorage.getItem("depth")&&this.menu.addItem(_.MenuItemCode.CONTINUE,"Continue"),this.menu.addItem(_.MenuItemCode.NEW_GAME,"New Game");let e=0,t=-1;for(;;){this.clear(),this.drawChar(">",this.width/2-12,10+e,y.Colors.MENU_CURSOR);for(let e=0;e<this.menu.items.length;e++)this.drawText(this.menu.items[e].label,this.width/2-10,10+e);const a=yield this.getch();if("ArrowDown"===a&&e++,"ArrowUp"===a&&e--,"Enter"===a){t=this.menu.items[e].code;break}e%=this.menu.items.length,e<0&&(e=this.menu.items.length-1)}-1!=t&&(t===_.MenuItemCode.NEW_GAME&&(yield this.newGame()),t===_.MenuItemCode.CONTINUE&&(yield this.continueGame()))}))}save(){return i(this,void 0,void 0,(function*(){const e=(0,g.ensure)(this.player);(0,g.ensure)(e.destructible).isDead()?window.localStorage.clear():((0,g.ensure)(this.map).save(),window.localStorage.setItem("playerID",this.actors.indexOf(e).toString()),window.localStorage.setItem("turns",this.turns.toString()),window.localStorage.setItem("actors",JSON.stringify(this.actors)),window.localStorage.setItem("version","v0.0.1.12a"))}))}clear(e=y.Colors.BACKGROUND){this.ctx.fillStyle=e,this.ctx.fillRect(0,0,this.width*this.fontSize,this.height*this.fontSize),this.ctx.fillRect(0,this.height*this.fontSize,this.width*this.fontSize,this.canvas.height-this.height*this.fontSize)}saveImage(){const e=this.width,t=this.height,a=this.camera.x,i=this.camera.y;this.width=this.mapx,this.height=this.mapy,(0,g.ensure)(document.querySelector("#temp-image")).classList.remove("hidden");const s=(0,g.ensure)(document.querySelector("#temp-image-canvas"));this.canvas=s,this.ctx=(0,g.ensure)(this.canvas.getContext("2d")),this.ctx.canvas.width=this.mapx*this.fontSize,this.ctx.canvas.height=this.mapy*this.fontSize,this.camera.x=0,this.camera.y=0,this.clear(),(0,g.ensure)(this.map).render();for(let e=0;e<this.actors.length;e++)this.actors[e].render();this.canvas=(0,g.ensure)(document.getElementById("screen")),this.ctx=(0,g.ensure)(this.canvas.getContext("2d")),this.width=e,this.height=t,this.camera.x=a,this.camera.y=i}drawChar(e,t,a,i=y.Colors.BACKGROUND){t<0||a<0||t>this.width||a>this.height||(this.ctx.textAlign="center",this.ctx.fillStyle=y.Colors.BACKGROUND,this.ctx.fillRect(t*this.fontSize-this.fontSize/2,a*this.fontSize,this.fontSize,this.fontSize),this.ctx.fillStyle=i,this.ctx.fillText(e,t*this.fontSize,a*this.fontSize+this.fontSize))}drawText(e,t,a,i=y.Colors.DEFAULT_TEXT){this.ctx.textAlign="left",this.ctx.fillStyle=y.Colors.BACKGROUND,this.ctx.fillStyle=i,this.ctx.fillText(e,t*this.fontSize,a*this.fontSize+this.fontSize)}run(){return i(this,void 0,void 0,(function*(){for((0,g.debugInit)();;)for(yield this.load(),yield this.gameloop(),yield this.save(),this.log.add("Press Esc to restart"),this.render();"Escape"!==(yield this.getch()););}))}waitingKeypress(){return new Promise((e=>{document.addEventListener("keydown",(function a(i){i.preventDefault(),0!==i.keyCode&&(document.removeEventListener("keydown",a),t.game.lastKey=i.key,e())}))}))}getch(){return i(this,void 0,void 0,(function*(){yield this.waitingKeypress();const e=this.lastKey;return this.lastKey="",e}))}render(){this.clear(),(0,g.ensure)(this.map).render();for(let e=0;e<this.actors.length;e++)this.actors[e].render();this.renderUI()}renderUI(){var e,t,a,i,s,r,o,n,l;for(let e=0;e<this.width;e++)this.drawChar("-",e,this.height,y.Colors.MENU_BORDER);const d=(0,g.ensure)(this.player),c=(0,g.ensure)(null===(e=d.destructible)||void 0===e?void 0:e.hp),u=null===(t=d.destructible)||void 0===t?void 0:t.defense,m=null===(a=d.attacker)||void 0===a?void 0:a.power,f=(0,g.ensure)(null===(i=d.destructible)||void 0===i?void 0:i.maxHP),p=(0,g.ensure)(this.map).depth,v=(0,g.ensure)(this.turns),_=null===(s=d.destructible)||void 0===s?void 0:s.xp;this.drawText(`HP: ${c}/${f}`,1,this.height+1,c<f/100*10?y.Colors.HP_10_PERCENT:c<f/100*25?y.Colors.HP_25_PERCENT:c<f/100*50?y.Colors.HP_50_PERCENT:c<f/100*95?y.Colors.HP_95_PERCENT:y.Colors.HP_MAX),this.drawText(`ATT: ${m}`,7,this.height+1),this.drawText(`AC: ${u}`,13,this.height+1),this.drawText(`Depth: ${p}`,this.width-6,this.height+1),this.drawText(`Turn: ${v}`,this.width-6,this.height+2),this.drawText(`EXP: ${_} / ${null===(r=d.ai)||void 0===r?void 0:r.getNextLevelXP()}`,1,this.height+2);const w=null===(o=this.player)||void 0===o?void 0:o.abilities;this.drawText(`STR: ${null==w?void 0:w.str} (${null==w?void 0:w.getBonusWithSign(h.ABILITIES.STR)})`,19,this.height+1),this.drawText(`DEX: ${null==w?void 0:w.dex} (${null==w?void 0:w.getBonusWithSign(h.ABILITIES.DEX)})`,27,this.height+1),this.drawText(`CON: ${null==w?void 0:w.con} (${null==w?void 0:w.getBonusWithSign(h.ABILITIES.CON)})`,35,this.height+1),this.drawText(`INT: ${null==w?void 0:w.int} (${null==w?void 0:w.getBonusWithSign(h.ABILITIES.INT)})`,43,this.height+1),this.drawText(`WIS: ${null==w?void 0:w.wis} (${null==w?void 0:w.getBonusWithSign(h.ABILITIES.WIS)})`,51,this.height+1),this.log.render(),this.drawText("Weared",this.width-20,this.height+3);let T=0;if(d.equipments&&(null===(n=d.equipments)||void 0===n?void 0:n.items.length)>0)for(const e of(0,g.ensure)(null===(l=d.equipments)||void 0===l?void 0:l.items))this.drawText(e.name,this.width-20,this.height+4+T),T++}gameloop(){var e,t,a,s,r,o;return i(this,void 0,void 0,(function*(){for(;;){if(this.gameStatus===w.STARTUP&&(null===(e=this.player)||void 0===e||e.computeFov(),this.camera.compute((0,g.ensure)(null===(t=this.player)||void 0===t?void 0:t.x),(0,g.ensure)(null===(a=this.player)||void 0===a?void 0:a.y)),this.render()),this.gameStatus=w.IDLE,yield null===(s=this.player)||void 0===s?void 0:s.update(),this.gameStatus===w.NEW_TURN){for(const e of this.actors)e!==this.player&&(yield e.update());this.turns++}if(this.render(),this.gameStatus===w.DEFEAT){this.drawText("DEFEAT!",this.width/2-3,this.height/2,y.Colors.DEFEAT),this.log.add("DEFEAT",y.Colors.DEFEAT),null===(o=null===(r=this.player)||void 0===r?void 0:r.fov)||void 0===o||o.showAll(),this.saveImage();break}}}))}removeActor(e){for(let t=0;t<this.actors.length;t++)if(this.actors[t]===e)return void this.actors.splice(t,1)}sendToBack(e){this.removeActor(e),this.actors.unshift(e)}getClosestMonster(e,t,a){let i=null,s=1e5;for(const r of this.actors)if(r!=this.player&&r.destructible&&!r.destructible.isDead()){const o=r.getDistance(e,t);o<s&&(o<=a||0==a)&&(s=o,i=r)}return i}getActor(e,t){for(const a of this.actors)if(a.x===e&&a.y===t&&a.destructible&&!a.destructible.isDead())return a;return null}getAnyActor(e,t){for(const a of this.actors)if(a.x===e&&a.y===t)return a;return null}pickATile(e,t,a=0){var s,r;return i(this,void 0,void 0,(function*(){let i=e,o=t,n=!1;for(;;){this.render(),(null===(r=null===(s=this.player)||void 0===s?void 0:s.fov)||void 0===r?void 0:r.isInFov(i,o))&&(0==a||this.player.getDistance(i,o)<=a)?(this.drawChar("+",i+this.camera.x,o+this.camera.y,y.Colors.ALLOWED),n=!0):(this.drawChar("+",i+this.camera.x,o+this.camera.y,y.Colors.DISALLOWED),n=!1);const e=yield this.getch();if("ArrowLeft"===e&&i--,"ArrowRight"===e&&i++,"ArrowUp"===e&&o--,"ArrowDown"===e&&o++,"Escape"===e)break;if("Enter"===e&&n)return[!0,i,o]}return[!1,i,o]}))}},t.game.run()},801:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0});const i=a(607),s=a(524),r=a(889),o=a(692),n=a(928),l=a(409);t.default=class{constructor(e){this.size=e,this.inventory=[]}add(e){return!(this.size>0&&this.inventory.length>=this.size||(this.inventory.push(e),0))}remove(e){for(let t=0;t<this.inventory.length;t++)if(this.inventory[t]===e)return void this.inventory.splice(t,1)}renderMenuBackground({title:e,x:t,y:a,w:s,h:r}){for(let e=0;e<r;e++)for(let o=0;o<s;o++)(0===e||e===r-1)&&o>0&&o<s-1?i.game.drawChar("-",o+t,e+a,l.Colors.MENU_BORDER):(0===o||o===s-1)&&e>0&&e<r-1?i.game.drawChar("|",o+t,e+a,l.Colors.MENU_BORDER):0===e||0===o||e===r-1||o===s-1?i.game.drawChar("+",o+t,e+a,l.Colors.MENU_BORDER):i.game.drawChar(" ",o+t,e+a,l.Colors.MENU_BORDER);for(let r=0;r<e.length;r++)i.game.drawChar(e.charAt(r),t+s/2-e.length/2+r,a,l.Colors.DEFAULT_TEXT)}render(){var e,t,a,l;this.renderMenuBackground({title:"INVENTORY",x:15,y:4,w:45,h:30});let d="a",c=0;for(const h of this.inventory){i.game.drawText(d+") "+h.name,16,6+c);const u=(0,n.ensure)(h.pickable).weight;i.game.drawText(`${u} lb`,54,6+c),d=String.fromCharCode(d.charCodeAt(0)+1);let m="";if(h.armor&&(h.armor.armorType===r.ArmorType.SHIELD&&(m=`AC: ${h.armor.armorClass}, shield`),h.armor.armorType===r.ArmorType.LIGHT_ARMOR&&(m=`AC: ${h.armor.armorClass}, light armor`),h.armor.armorType===r.ArmorType.MEDIUM_ARMOR&&(m=`AC: ${h.armor.armorClass}, medium armor`),h.armor.armorType===r.ArmorType.HEAVY_ARMOR&&(m=`AC: ${h.armor.armorClass}, heavy armor`)),h.weapon&&(h.weapon.damageType===o.DamageType.BLUDGEONING&&(m=`damage: ${h.weapon.damage}, bludgeoning`),h.weapon.damageType===o.DamageType.PIERCING&&(m=`damage: ${h.weapon.damage}, piercing`),h.weapon.damageType===o.DamageType.SLASHING&&(m=`damage: ${h.weapon.damage}, slashing`)),null===(e=h.pickable)||void 0===e?void 0:e.effect){let e="";"HealthEffect"===h.pickable.effectName&&(e=h.pickable.effect.amount>0?`healing: ${Math.abs(h.pickable.effect.amount)}`:`damage: ${Math.abs(h.pickable.effect.amount)}`),"AiChangeEffect"===h.pickable.effectName&&(e=`confused ${h.pickable.effect.newAi.nbTurns} turns`),"scroll of map"===h.name&&(e="Reveal current map"),m+=`${e}`,(null===(t=h.pickable)||void 0===t?void 0:t.selector)&&(m+=", ")}if(null===(a=h.pickable)||void 0===a?void 0:a.selector){let e="";const t=h.pickable.selector.range;h.pickable.selector.type===s.SelectorType.CLOSEST_MONSTER&&(e="closest enemy"),h.pickable.selector.type===s.SelectorType.SELECTED_MONSTER&&(e="selected monster"),h.pickable.selector.type===s.SelectorType.SELECTED_RANGE&&(e="selected range"),h.pickable.selector.type===s.SelectorType.WEARER_RANGE&&(e="wearer range"),m+=`${e}, range: ${t}`}(null===(l=h.pickable)||void 0===l?void 0:l.effect)&&"Wearable"===h.pickable.effectName&&(h.pickable.effect.type===s.WearableType.ONEHANDED_WEAPON&&(m+=", one-handed"),h.pickable.effect.type===s.WearableType.TWOHANDED_WEAPON&&(m+=", two-handed"),h.pickable.effect.type===s.WearableType.SHIELD&&(m+=", shield"),h.pickable.effect.type===s.WearableType.ARMOR&&(m+=", armor")),i.game.drawText(`${m}`,30,6+c),c++}}}},927:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0});const i=a(928);t.default=class{constructor(){this.items=[]}add(e){return this.items.push(e),!0}takeOff(e){var t,a;for(let i=0;i<this.items.length;i++)if((null===(t=this.items[i].pickable)||void 0===t?void 0:t.effect)&&(null===(a=this.items[i].pickable)||void 0===a?void 0:a.effect.type)===e)return this.items.splice(i,1)[0]}getAC(){let e=0;for(const t of this.items)t.armor&&(e+=t.armor.armorClass);return e}getPower(){let e="1d3";for(const t of this.items)t.weapon&&(e=t.weapon.damage);return e}update(e){e.destructible&&((0,i.ensure)(null==e?void 0:e.destructible).defense=this.getAC(),(0,i.ensure)(e.attacker).power=this.getPower())}}},382:function(e,t,a){var i=this&&this.__createBinding||(Object.create?function(e,t,a,i){void 0===i&&(i=a),Object.defineProperty(e,i,{enumerable:!0,get:function(){return t[a]}})}:function(e,t,a,i){void 0===i&&(i=a),e[i]=t[a]}),s=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),r=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var a in e)"default"!==a&&Object.prototype.hasOwnProperty.call(e,a)&&i(t,e,a);return s(t,e),t},o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.createItem=t.items=t.weapons=t.armors=void 0;const n=o(a(260)),l=o(a(886)),d=o(a(391)),c=o(a(204)),h=r(a(524)),u=r(a(889)),m=r(a(692)),f=o(a(808)),p=a(792),g=a(928),y=a(409);t.armors=l.default,t.weapons=c.default,t.items=d.default,t.createItem=e=>{let a,i,s,r="?",o=n.default.default_item,l=!1,d=u.ArmorType.LIGHT_ARMOR;if((e=>!!t.weapons.find((t=>t.name===e)))(e.name)){const i=(0,g.ensure)((e=>t.weapons.find((t=>t.name===e)))(e.name));let n=m.DamageType.BLUDGEONING,d=h.WearableType.ONEHANDED_WEAPON;"bludgeoning"===i.damageType&&(n=m.DamageType.BLUDGEONING),"slashing"===i.damageType&&(n=m.DamageType.SLASHING),"piercing"===i.damageType&&(n=m.DamageType.PIERCING),"one-handed"===i.wearableType&&(d=h.WearableType.ONEHANDED_WEAPON),"two-handed"===i.wearableType&&(d=h.WearableType.TWOHANDED_WEAPON),s=new m.default({name:e.name,damage:null==i?void 0:i.damage,damageType:n}),r="F",o=y.Colors.WEAPON_ITEM,l=!1,a=new h.default({selector:void 0,effect:new h.Wearable(d),weight:i.weight})}else if((e=>!!t.armors.find((t=>t.name===e)))(e.name)){const s=(0,g.ensure)((e=>t.armors.find((t=>t.name===e)))(e.name));"light"===s.armorType&&(d=u.ArmorType.LIGHT_ARMOR),"medium"===s.armorType&&(d=u.ArmorType.MEDIUM_ARMOR),"heavy"===s.armorType&&(d=u.ArmorType.HEAVY_ARMOR),"shield"===s.armorType&&(d=u.ArmorType.SHIELD),i=new u.default({name:e.name,ac:s.ac,armorClassAbilityType:d===u.ArmorType.HEAVY_ARMOR?"str":"dex",armorType:d,requirementStrenght:0}),r="L",o=y.Colors.ARMOR_ITEM,l=!1,a=new h.default({selector:void 0,effect:new h.Wearable(d===u.ArmorType.SHIELD?h.WearableType.SHIELD:h.WearableType.ARMOR),weight:s.weight})}else if((e=>!!t.items.find((t=>t.name===e)))(e.name)){const i=(0,g.ensure)((e=>t.items.find((t=>t.name===e)))(e.name));let s,n;r=i.ch,o=i.color,l=!1,"selected range"===i.selector.type&&(s=new h.TargetSelector(h.SelectorType.SELECTED_RANGE,i.selector.range)),"selected monster"===i.selector.type&&(s=new h.TargetSelector(h.SelectorType.SELECTED_MONSTER,i.selector.range)),"closest monster"===i.selector.type&&(s=new h.TargetSelector(h.SelectorType.CLOSEST_MONSTER,i.selector.range)),"health"===i.effect.type&&(n=new h.HealthEffect(i.effect.amount,i.message)),"map clear"===i.effect.type&&(n=new h.MapClearEffect(i.message)),"change ai"===i.effect.type&&(n=new h.AiChangeEffect(new p.ConfusedMonsterAi(i.effect.amount),i.message)),a=new h.default({selector:s,effect:n,weight:i.weight})}else console.error(`${name} not found.`);const c=new f.default(e.x,e.y,r,e.name,o);return c.blocks=l,c.pickable=a,c.armor=i,c.weapon=s,c}},524:function(e,t,a){var i=this&&this.__awaiter||function(e,t,a,i){return new(a||(a=Promise))((function(s,r){function o(e){try{l(i.next(e))}catch(e){r(e)}}function n(e){try{l(i.throw(e))}catch(e){r(e)}}function l(e){var t;e.done?s(e.value):(t=e.value,t instanceof a?t:new a((function(e){e(t)}))).then(o,n)}l((i=i.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.AiChangeEffect=t.HealthEffect=t.Wearable=t.WearableType=t.MapClearEffect=t.TargetSelector=t.SelectorType=void 0;const s=a(607),r=a(928),o=a(409);var n,l;!function(e){e[e.NONE=0]="NONE",e[e.CLOSEST_MONSTER=1]="CLOSEST_MONSTER",e[e.SELECTED_MONSTER=2]="SELECTED_MONSTER",e[e.WEARER_RANGE=3]="WEARER_RANGE",e[e.SELECTED_RANGE=4]="SELECTED_RANGE"}(n=t.SelectorType||(t.SelectorType={})),t.TargetSelector=class{constructor(e,t){this.type=e,this.range=t}selectTargets(e,t){return i(this,void 0,void 0,(function*(){const a=()=>i(this,void 0,void 0,(function*(){const[a,i,r]=yield s.game.pickATile(e.x,e.y);if(void 0===a||!1===a)return;const o=s.game.getActor(i,r);o&&o.destructible&&!o.destructible.isDead()&&o.getDistance(i,r)<=this.range&&t.push(o)})),r=()=>{const a=s.game.getClosestMonster(e.x,e.y,this.range);a&&t.push(a)},o=()=>i(this,void 0,void 0,(function*(){const[a,i,r]=yield s.game.pickATile(e.x,e.y);if(!1===a)return;const o=s.game.getActor(i,r);o&&t.push(o)})),l=()=>{for(const a of s.game.actors)a!=e&&a.destructible&&!a.destructible.isDead()&&a.getDistance(e.x,e.y)<=this.range&&t.push(a)};switch(this.type){case n.CLOSEST_MONSTER:r();break;case n.SELECTED_MONSTER:yield o();break;case n.WEARER_RANGE:l();break;case n.SELECTED_RANGE:yield a();break;default:console.error(`Error with selectorType: ${this.type}`)}0===t.length&&s.game.log.add("No enemy is close enough")}))}},t.MapClearEffect=class{constructor(e){this.message=e}applyTo(e){var t,a,i;return(0,r.ensure)(e),null===(a=null===(t=s.game.player)||void 0===t?void 0:t.fov)||void 0===a||a.showAll(),null===(i=s.game.player)||void 0===i||i.computeFov(),!0}},(l=t.WearableType||(t.WearableType={}))[l.ARMOR=0]="ARMOR",l[l.SHIELD=1]="SHIELD",l[l.ONEHANDED_WEAPON=2]="ONEHANDED_WEAPON",l[l.TWOHANDED_WEAPON=3]="TWOHANDED_WEAPON",t.Wearable=class{constructor(e){this.type=e}applyTo(e){return(0,r.ensure)(e),console.log("apply to:"+e.name),!1}},t.HealthEffect=class{constructor(e,t){this.amount=0,this.amount=e,this.message=t}applyTo(e){if(!e||!e.destructible)return!1;if(this.amount>0){if(e.destructible.heal(this.amount)>0)return this.message&&s.game.log.add(this.message,o.Colors.HEALED),!0}else if(this.message&&-this.amount-e.destructible.defense>0&&s.game.log.add(this.message),e.destructible.takeDamage(e,-this.amount)>0)return!0;return!1}},t.AiChangeEffect=class{constructor(e,t){this.message=t,this.newAi=e}applyTo(e){return this.newAi.applyTo(e),this.message&&s.game.log.add(this.message),!0}},t.default=class{constructor(e){this.selector=null==e?void 0:e.selector,this.effect=null==e?void 0:e.effect,this.weight=null==e?void 0:e.weight,void 0!==this.selector&&(this.selectorName=this.selector.constructor.name),void 0!==this.effect&&(this.effectName=this.effect.constructor.name)}pick(e,t){return!(!t.container||!t.container.add(e)||(s.game.removeActor(e),0))}use(e,t){var a;return i(this,void 0,void 0,(function*(){s.game.log.add(`You use a ${e.name}`);const i=Array();this.selector?yield this.selector.selectTargets(t,i):i.push(t);let r=!1;for(const e of i)(null===(a=this.effect)||void 0===a?void 0:a.applyTo(e))&&(r=!0);return r&&t.container&&t.container.remove(e),r}))}drop(e,t){t.container&&(t.container.remove(e),s.game.actors.push(e),s.game.sendToBack(e),e.x=t.x,e.y=t.y,s.game.log.add(`${t.name} drops a ${e.name}`))}wear(e,t){if((e.armor||e.weapon)&&t.container&&t.equipments&&e.pickable){t.container.remove(e);const a=t.equipments.takeOff(e.pickable.effect.type);t.container&&a&&(s.game.log.add(`take off a ${a.name}`),t.container.add(a)),t.equipments.add(e),s.game.log.add(`${t.name} wear a ${e.name}`),t.equipments.update(t)}}}},10:function(e,t,a){var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const s=i(a(705)),r=a(928),o=i(a(451)),n=i(a(357)),l=new o.default;t.default=class{constructor(e,t,a,i,s=5){this.maxLevel=s,this.rootContainer=new n.default(e+1,t+1,a-2,i-2),this.rows=i,this.cols=a,this.map=[],this.doorPlaces=[],this.tempRooms=[];for(let e=0;e<this.rows;e++)for(let t=0;t<this.cols;t++){const a=this.cols*e+t;this.map[a]=1}this.tree=this.Devide(this.rootContainer,0),this.rooms=this.tree.GetLeafs(),this.CreateRooms(),this.ConnectRooms(this.tree)}RandomSplit(e){let t,a,i=!l.getInt(0,1);if(i=e.w>e.h&&e.w/e.h>=.05,i){const i=l.getInt(.3*e.w,.6*e.w);t=new n.default(e.x,e.y,i,e.h),a=new n.default(e.x+i,e.y,e.w-i,e.h)}else{const i=l.getInt(.3*e.h,.6*e.h);t=new n.default(e.x,e.y,e.w,i),a=new n.default(e.x,e.y+i,e.w,e.h-i)}return[t,a]}Devide(e,t){const a=new s.default(e);if(t<this.maxLevel){const i=this.RandomSplit(e);a.A=this.Devide(i[0],t+1),a.B=this.Devide(i[1],t+1)}return a}CreateRooms(){for(const e of this.rooms){const t=l.getInt(.5*e.w,.9*e.w),a=l.getInt(.5*e.h,.9*e.h),i=l.getInt(e.x,e.x+e.w-t),s=l.getInt(e.y,e.y+e.h-a),r=new n.default(i,s,i+t,s+a);this.tempRooms.push(r);for(let e=s;e<s+a;e++)for(let a=i;a<i+t;a++){const t=this.cols*e+a;this.map[t]=0}}}IsThereRoom(e,t){for(const a of this.tempRooms)if(e>=a.x&&t>=a.y&&e<=a.w&&t<=a.h)return!0;return!1}ConnectRooms(e){if(!e.A||!e.B)return!1;const t=(0,r.float2int)(e.A.leaf.GetCenterX()),a=(0,r.float2int)(e.A.leaf.GetCenterY()),i=(0,r.float2int)(e.B.leaf.GetCenterX()),s=(0,r.float2int)(e.B.leaf.GetCenterY());let o=!1,l=!1;for(let e=Math.min(t,i);e<=Math.max(t,i);e++){const t=this.cols*Math.max(a,s)+e;if(this.map[t]=0,o||!0!==this.IsThereRoom(e,Math.max(a,s))){if(!o&&!1===this.IsThereRoom(e,Math.max(a,s))&&!0===l){o=!0;const t=new n.default(e,Math.max(a,s),0,0);this.doorPlaces.push(t)}}else l=!0}o=!1;for(let e=Math.min(a,s);e<=Math.max(a,s);e++){const a=this.cols*e+Math.max(t,i);if(this.map[a]=0,o||!0!==this.IsThereRoom(Math.max(t,i),e)){if(!o&&!1===this.IsThereRoom(Math.max(t,i),e)&&!0===l){o=!0;const a=new n.default(Math.max(t,i),e,0,0);this.doorPlaces.push(a)}}else l=!0}this.ConnectRooms((0,r.ensure)(e.A)),this.ConnectRooms((0,r.ensure)(e.B))}}},705:function(e,t,a){var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const s=i(a(357));class r extends s.default{constructor(e){super(e.x,e.y,e.w,e.h),this.A=void 0,this.B=void 0,this.leaf=e}GetLeafs(){return this.A&&this.B?[...this.A.GetLeafs(),...this.B.GetLeafs()]:[this.leaf]}}t.default=r},84:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Camera=void 0,t.Camera=class{constructor(){this.centerX=0,this.centerY=0,this.x=0,this.y=0}setCenter(e,t){this.centerX=e/2,this.centerY=t/2}compute(e,t){this.x=this.centerX-e,this.y=this.centerY-t}}},135:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0});const i=a(607),s=a(928);t.default=class{constructor(e,t){this.width=e,this.height=t,this.mapped=new Array(this.width*this.height).fill(0)}clear(){for(let e=0;e<this.width*this.height;e++)2===this.mapped[e]&&(this.mapped[e]=1)}fullClear(){this.mapped=new Array(this.width*this.height).fill(0)}showAll(){var e,t,a,r,o,n,l,d,c;this.mapped=new Array(this.width*this.height).fill(2);for(let h=1;h<this.height-1;h++)for(let u=1;u<this.width-1;u++)if(1==(null===(e=i.game.map)||void 0===e?void 0:e.isWall(u,h))){let e=0;if((null===(t=i.game.map)||void 0===t?void 0:t.isWall(u-1,h))&&e++,(null===(a=i.game.map)||void 0===a?void 0:a.isWall(u+1,h))&&e++,(null===(r=i.game.map)||void 0===r?void 0:r.isWall(u,h-1))&&e++,(null===(o=i.game.map)||void 0===o?void 0:o.isWall(u,h+1))&&e++,(null===(n=i.game.map)||void 0===n?void 0:n.isWall(u-1,h+1))&&e++,(null===(l=i.game.map)||void 0===l?void 0:l.isWall(u+1,h+1))&&e++,(null===(d=i.game.map)||void 0===d?void 0:d.isWall(u-1,h-1))&&e++,(null===(c=i.game.map)||void 0===c?void 0:c.isWall(u+1,h-1))&&e++,e>=8){const e=(0,s.float2int)(u)+(0,s.float2int)(h)*this.width;this.mapped[e]=0}}}compute(e,t,a){var r;this.clear();let o=0,n=0,l=0,d=0;this.mapped[e+t*this.width]=2;for(let c=0;c<360;c++){o=Math.sin(c/3.1415*180),n=Math.cos(c/3.1415*180),l=e+.5,d=t+.5;for(let e=0;e<a&&(l+=o,d+=n,!(l<=0||l>=this.width||d<=0||d>=this.height));e++){const e=(0,s.float2int)(l)+(0,s.float2int)(d)*this.width;if(this.mapped[e]=2,!(null===(r=i.game.map)||void 0===r?void 0:r.canWalk((0,s.float2int)(l),(0,s.float2int)(d))))break}}}getMapped(e,t){return e>=0&&t>=0&&e<this.width&&t<this.height?this.mapped[e+t*this.width]:2}isInFov(e,t){return e>=0&&t>=0&&e<this.width&&t<this.height&&this.mapped[e+t*this.width]>0}}},423:function(e,t,a){var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.random=void 0;const s=a(607),r=a(382),o=i(a(10)),n=a(127),l=i(a(808)),d=a(928),c=a(409),h=i(a(451)),u=i(a(357));t.random=new h.default;class m{constructor(){this.canWalk=!1,this.explored=!1}}t.default=class{constructor(e,t){this.startX=0,this.startY=0,this.stairsX=0,this.stairsY=0,this.levelSeed=0,this.depth=0,this.ROOM_MAX_SIZE=5,this.ROOM_MIN_SIZE=4,this.MAX_ROOM_MONSTERS=3,this.MAX_ROOM_ITEMS=2,this.width=e,this.height=t,this.templateDoors=[],this.tiles=new Array(this.width*this.height).fill(!1)}save(){window.localStorage.setItem("seed",this.levelSeed.toString()),window.localStorage.setItem("depth",this.depth.toString())}isWall(e,t){const a=e+t*this.width;return!this.tiles[a].canWalk}setWall(e,t){this.tiles[e+t*this.width].canWalk=!1}canWalk(e,t){if(this.isWall(e,t))return!1;for(const a of s.game.actors)if(a.x===e&&a.y===t&&a.blocks)return!1;return!0}addMonster(e,a){const i=["bat","rat","jackal","lizard","kobold","giant rat"],r=["giant rat","orc","ghoul"];if(t.random.getInt(0,100)>20){const r=t.random.getInt(0,i.length);s.game.actors.push((0,n.createMonster)(i[r],e,a))}else{const i=t.random.getInt(0,r.length);s.game.actors.push((0,n.createMonster)(r[i],e,a))}}openCloseDoor(e,t){const a=s.game.getAnyActor(e,t);return!(!a||"door"!==a.name||(a.blocks=!a.blocks,a.blocks?(a.ch="D",s.game.log.add("a door is closed")):(a.ch="+",s.game.log.add("a door is opened")),0))}addDoor(e,t,a){const i=new l.default(e,t,a?"D":"+","door",c.Colors.DOOR);i.blocks=!0,(1==this.isWall(e-1,t)&&1==this.isWall(e+1,t)||1==this.isWall(e,t-1)&&1==this.isWall(e,t+1))&&s.game.actors.push(i)}additem(e,a){const i=t.random.getInt(0,100);let o;i<70?t.random.getInt(0,100)<95?o=(0,r.createItem)({name:"health potion",x:e,y:a}):(o=(0,r.createItem)({name:"nutella bun",x:e,y:a}),console.log("Jossain haisoo nutella!")):o=i<80?(0,r.createItem)({name:"scroll of lighting bolt",x:e,y:a}):i<90?(0,r.createItem)({name:"scroll of fireball",x:e,y:a}):i<95?(0,r.createItem)({name:"scroll of confusion",x:e,y:a}):(0,r.createItem)({name:"scroll of map",x:e,y:a}),o&&(s.game.actors.push(o),s.game.sendToBack(o))}dig(e,t,a,i,s){if(e=(0,d.float2int)(e),a=(0,d.float2int)(a),t=(0,d.float2int)(t),a<e){const t=a;a=e,e=t}if((i=(0,d.float2int)(i))<t){const e=i;i=t,t=e}let r=!1;for(let o=e;o<=a;o++)for(let n=t;n<=i;n++){const l=o+n*this.width;0!=this.tiles[l].canWalk||!0!==r||e!==a&&t!==i||s&&o!==this.stairsX&&n!==this.stairsY&&this.templateDoors.push(new u.default(o,n,0,0)),r=this.tiles[l].canWalk,this.tiles[l].canWalk=!0}}addActors(e){let a=t.random.getInt(0,this.MAX_ROOM_MONSTERS),i=t.random.getInt(0,this.MAX_ROOM_ITEMS);const s=e.x,r=e.x+e.w,o=e.y,n=e.y+e.h;for(;a>0;){const e=t.random.getInt(s,r),i=t.random.getInt(o,n);this.canWalk(e,i)&&this.addMonster(e,i),a--}for(;i>0;){const e=t.random.getInt(s,r),a=t.random.getInt(o,n);this.canWalk(e,a)&&this.additem(e,a),i--}}createRoom(e,t,a,i,s){this.dig(e,t,a,i,s)}generate(e,a,i){this.levelSeed=a,this.depth=i,t.random.setSeed(this.levelSeed+25*i);const s=t.random.getInt(4,8);console.log("seed: "+this.levelSeed),console.log("depth: "+this.depth),console.log("split level:"+s);const r=new o.default(0,0,this.width,this.height,s);this.tiles=new Array(this.width*this.height).fill(!1);const n=[],l=t.random.getInt(0,100)>70?1:2;for(let e=0;e<this.width*this.height;e++)this.tiles[e]=new m;let c=0,h=0,f=0,p=0,g=0,y=0;const v=t.random.getInt(0,r.rooms.length-1),_=t.random.getInt(0,r.rooms.length-1);for(let a=0;a<r.rooms.length;a++){const i=r.rooms[a],s=a===v;1===l&&(g=i.w,y=i.h,f=i.x+1,p=i.y+1,this.createRoom(f,p,f+g-2,p+y-2,e),s||n.push(new u.default(f,p,g-2,y-2))),2===l&&(g=t.random.getInt(this.ROOM_MIN_SIZE,i.w-2),y=t.random.getInt(this.ROOM_MIN_SIZE,i.h-2),f=t.random.getInt(i.x,i.x+i.w-g-0)+1,p=t.random.getInt(i.y,i.y+i.h-y-0)+1,this.createRoom(f,p,f+g-2,p+y-2,e),s||n.push(new u.default(f,p,g-2,y-2))),a===v&&(this.startX=f+(0,d.float2int)(g/2),this.startY=p+(0,d.float2int)(y/2)),a===_&&(this.stairsX=(0,d.float2int)(f+g/2),this.stairsY=(0,d.float2int)(p+y/2)),1!==l&&2!==l||(a>0&&(this.dig(c,h,f+g/2,h,e),this.dig(f+g/2,h,f+g/2,p+y/2,e)),c=f+g/2,h=p+y/2)}if(e){for(const e of n)this.addActors(e);for(const e of this.templateDoors)this.addDoor(e.x,e.y,!0)}}render(){var e,t;for(let a=0;a<this.height;a++)for(let i=0;i<this.width;i++){const r=null===(t=null===(e=s.game.player)||void 0===e?void 0:e.fov)||void 0===t?void 0:t.getMapped(i,a),o=i+s.game.camera.x,n=a+s.game.camera.y;2!==r&&1!==r||(2===r?s.game.drawChar(this.isWall(i,a)?"#":".",o,n,c.Colors.WALL):s.game.drawChar(this.isWall(i,a)?"#":".",o,n,c.Colors.WALL_DARK))}}}},557:(e,t)=>{var a;Object.defineProperty(t,"__esModule",{value:!0}),t.Abilities=t.ABILITIES=void 0,function(e){e[e.STR=0]="STR",e[e.DEX=1]="DEX",e[e.CON=2]="CON",e[e.INT=3]="INT",e[e.WIS=4]="WIS"}(a=t.ABILITIES||(t.ABILITIES={})),t.Abilities=class{constructor(e,t,a,i,s){this.str=0,this.dex=0,this.con=0,this.int=0,this.wis=0,this.str=e,this.dex=t,this.con=a,this.int=i,this.wis=s}getBonus(e){let t=0;switch(e){case a.STR:t=this.str;break;case a.DEX:t=this.dex;break;case a.CON:t=this.con;break;case a.INT:t=this.int;break;case a.WIS:t=this.wis}return Math.floor((t-10)/2)}getBonusWithSign(e){const t=this.getBonus(e);return(t>=0?"+":"")+t.toString()}}},889:(e,t)=>{var a;Object.defineProperty(t,"__esModule",{value:!0}),t.ArmorType=void 0,(a=t.ArmorType||(t.ArmorType={}))[a.LIGHT_ARMOR=0]="LIGHT_ARMOR",a[a.MEDIUM_ARMOR=1]="MEDIUM_ARMOR",a[a.HEAVY_ARMOR=2]="HEAVY_ARMOR",a[a.SHIELD=3]="SHIELD",t.default=class{constructor(e){this.name=e.name,this.armorClass=e.ac,this.armorClassAbilityType=e.armorClassAbilityType,this.armorType=e.armorType,this.armorRequirementStrenght=null==e?void 0:e.requirementStrenght}}},529:function(e,t,a){var i=this&&this.__awaiter||function(e,t,a,i){return new(a||(a=Promise))((function(s,r){function o(e){try{l(i.next(e))}catch(e){r(e)}}function n(e){try{l(i.throw(e))}catch(e){r(e)}}function l(e){var t;e.done?s(e.value):(t=e.value,t instanceof a?t:new a((function(e){e(t)}))).then(o,n)}l((i=i.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0});const s=a(607),r=a(557),o=a(792),n=a(928),l=a(409);t.default=class{constructor(e){this.power=e}attack(e,t){return i(this,void 0,void 0,(function*(){this.meleeAttack(e,t)}))}meleeAttack(e,t){if(t.destructible&&!t.destructible.isDead()){const a=o.random.dice(1,20,0),i=(0,n.ensure)(e.abilities).getBonus(r.ABILITIES.STR);let d=!1;if(1===a)return void s.game.log.add(`${t.name} miss attack by ${e.name}`);if(20===a&&(d=!0,s.game.log.add(`${e.name} makes critical attack to ${t.name}!`,l.Colors.HILIGHT_TEXT)),a>=t.destructible.defense){const[a,r]=this.power.split("d");let n=1;const c=o.random.dice(n=!0===d?2*parseInt(a):parseInt(a),parseInt(r),0),h=r;s.game.log.add(`${e.name} attacks ${t.name} for ${c} hit points (${n}d${h}${i>0?"+":"-"}${Math.abs(i)}).`,e===s.game.player?l.Colors.PLAYER_ATTACK:l.Colors.ENEMY_ATTACK);let u=c+i;u<0&&(u=0),t.destructible.takeDamage(t,u)}}}}},127:function(e,t,a){var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.createMonster=t.monsters=void 0;const s=i(a(260)),r=i(a(47)),o=a(557),n=i(a(529)),l=i(a(808)),d=a(792),c=a(107),h=a(928);t.monsters=r.default,t.createMonster=(e,a,i)=>{let r="1d4",u=0,m=1,f=0,p="?",g=s.default.default_monster,y=new o.Abilities(2,2,2,2,2);if((e=>{for(const a of t.monsters)if(a.name===e)return!0;return!1})(e)){const a=(0,h.ensure)((e=>t.monsters.find((t=>t.name===e)))(e));p=a.ch,g=a.color,r=a.attacks[0].damage,f=a.ac,m=a.hp,u=a.xp,y=new o.Abilities(a.abilities.str,a.abilities.dex,a.abilities.con,a.abilities.int,a.abilities.wis)}const v=new l.default(a,i,p,e,g);return v.destructible=new c.MonsterDestructible(m,f,`dead ${e}`,u),v.attacker=new n.default(r),v.ai=new d.MonsterAI,v.abilities=y,v}},692:(e,t)=>{var a;Object.defineProperty(t,"__esModule",{value:!0}),t.DamageType=void 0,(a=t.DamageType||(t.DamageType={}))[a.BLUDGEONING=0]="BLUDGEONING",a[a.PIERCING=1]="PIERCING",a[a.SLASHING=2]="SLASHING",t.default=class{constructor(e){this.name=e.name,this.damage=e.damage,this.damageType=e.damageType}}},808:function(e,t,a){var i=this&&this.__createBinding||(Object.create?function(e,t,a,i){void 0===i&&(i=a),Object.defineProperty(e,i,{enumerable:!0,get:function(){return t[a]}})}:function(e,t,a,i){void 0===i&&(i=a),e[i]=t[a]}),s=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),r=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var a in e)"default"!==a&&Object.prototype.hasOwnProperty.call(e,a)&&i(t,e,a);return s(t,e),t},o=this&&this.__awaiter||function(e,t,a,i){return new(a||(a=Promise))((function(s,r){function o(e){try{l(i.next(e))}catch(e){r(e)}}function n(e){try{l(i.throw(e))}catch(e){r(e)}}function l(e){var t;e.done?s(e.value):(t=e.value,t instanceof a?t:new a((function(e){e(t)}))).then(o,n)}l((i=i.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0});const n=a(607),l=r(a(524)),d=a(792),c=a(928);t.default=class{constructor(e,t,a,i,s){this.fovOnly=!0,this.blocks=!0,this.x=(0,c.float2int)(e),this.y=(0,c.float2int)(t),this.ch=a,this.color=s,this.name=i}create(e){var t,a,i,s,r,o;let n;"Wearable"===(null===(t=e.pickable)||void 0===t?void 0:t.effectName)&&(n=new l.Wearable(e.pickable.effect.type)),"AiChangeEffect"===(null===(a=e.pickable)||void 0===a?void 0:a.effectName)&&(n=new l.AiChangeEffect(new d.ConfusedMonsterAi(parseInt(e.pickable.effect.newAi.nbTurns)),e.pickable.effect.message)),"HealthEffect"===(null===(i=null==e?void 0:e.pickable)||void 0===i?void 0:i.effectName)&&(n=new l.HealthEffect(null===(s=e.pickable)||void 0===s?void 0:s.effect.amount,void 0)),(null===(r=null==e?void 0:e.pickable)||void 0===r?void 0:r.selectorName)?this.pickable=new l.default({selector:new l.TargetSelector((0,c.ensure)(e.pickable.selector).type,(0,c.ensure)(e.pickable.selector).range),effect:n,weight:e.pickable.weight}):this.pickable=new l.default({selector:void 0,effect:n,weight:(0,c.ensure)(null===(o=e.pickable)||void 0===o?void 0:o.weight)})}render(){var e,t;const a=null===(t=null===(e=n.game.player)||void 0===e?void 0:e.fov)||void 0===t?void 0:t.getMapped(this.x,this.y);(2===a||0!=a&&!this.fovOnly)&&n.game.drawChar(this.ch,this.x+n.game.camera.x,this.y+n.game.camera.y,this.color)}update(){return o(this,void 0,void 0,(function*(){this.ai&&(yield this.ai.update(this))}))}computeFov(){this.fov&&this.fov.compute(this.x,this.y,10)}getDistance(e,t){const a=this.x-e,i=this.y-t;return Math.sqrt(a*a+i*i)}}},792:function(e,t,a){var i=this&&this.__awaiter||function(e,t,a,i){return new(a||(a=Promise))((function(s,r){function o(e){try{l(i.next(e))}catch(e){r(e)}}function n(e){try{l(i.throw(e))}catch(e){r(e)}}function l(e){var t;e.done?s(e.value):(t=e.value,t instanceof a?t:new a((function(e){e(t)}))).then(o,n)}l((i=i.apply(e,t||[])).next())}))},s=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.ConfusedMonsterAi=t.TemporaryAI=t.ConfusedAI=t.MonsterAI=t.PlayerAI=t.random=void 0;const r=a(607),o=a(928),n=a(409),l=a(865),d=s(a(451));t.random=new d.default;class c{}t.default=c,t.PlayerAI=class extends c{constructor(){super(),this.xpLevel=1}getNextLevelXP(){return 200+150*this.xpLevel}pickDirection(){return i(this,void 0,void 0,(function*(){const e=yield r.game.getch();let t=0,a=0;return"ArrowLeft"===e&&(t=-1),"ArrowRight"===e&&(t=1),"ArrowUp"===e&&(a=-1),"ArrowDown"===e&&(a=1),[t,a]}))}update(e){var t,a,s;return i(this,void 0,void 0,(function*(){const i=this.getNextLevelXP();if((0,o.ensure)(e.destructible).xp>=i){this.xpLevel++,(0,o.ensure)(e.destructible).xp-=i,r.game.log.add(`Your battle skills grow stronger! You reached level ${this.xpLevel}`,n.Colors.LEVEL_UP),r.game.menu=new l.Menu,r.game.menu.clear(),r.game.menu.addItem(l.MenuItemCode.CONSTITUTION,"Constitution (+20 hp)"),r.game.menu.addItem(l.MenuItemCode.STRENGTH,"Strenght (+1 attack)"),r.game.menu.addItem(l.MenuItemCode.AGILITY,"Agility (+1 defense)");let t=0,a=-1;for(;;){r.game.clear(),r.game.renderUI(),r.game.drawChar(">",r.game.width/2-12,10+t,n.Colors.MENU_CURSOR);for(let e=0;e<r.game.menu.items.length;e++)r.game.drawText(r.game.menu.items[e].label,r.game.width/2-10,10+e);const e=yield r.game.getch();if("ArrowDown"===e&&t++,"ArrowUp"===e&&t--,"Enter"===e){a=r.game.menu.items[t].code;break}t%=r.game.menu.items.length,t<0&&(t=r.game.menu.items.length-1)}-1!=a&&(a===l.MenuItemCode.CONSTITUTION&&((0,o.ensure)(e.destructible).hp+=20,(0,o.ensure)(e.destructible).maxHP+=20),a===l.MenuItemCode.STRENGTH&&((0,o.ensure)(e.attacker).power+=1),a===l.MenuItemCode.AGILITY&&((0,o.ensure)(e.destructible).defense+=1)),r.game.render()}if(e.destructible&&e.destructible.isDead())return;let d=0,c=0;const h=yield r.game.getch();switch(h){case"ArrowLeft":d--;break;case"ArrowRight":d++;break;case"ArrowUp":c--;break;case"ArrowDown":c++;break;default:yield this.handleActionKey(e,h)}0===d&&0===c||(r.game.gameStatus=r.GameStatus.NEW_TURN,(yield this.moveOrAttack(e,e.x+d,e.y+c))&&(null===(t=r.game.player)||void 0===t||t.computeFov(),r.game.camera.compute((0,o.ensure)(null===(a=r.game.player)||void 0===a?void 0:a.x),(0,o.ensure)(null===(s=r.game.player)||void 0===s?void 0:s.y))))}))}handleActionKey(e,t){return i(this,void 0,void 0,(function*(){const a=()=>i(this,void 0,void 0,(function*(){var t,a;r.game.log.add("Which direction?"),r.game.render();const[i,s]=yield this.pickDirection();(null===(t=null===r.game||void 0===r.game?void 0:r.game.map)||void 0===t?void 0:t.openCloseDoor(e.x+i,e.y+s))||r.game.log.add("There is no any door."),null===(a=r.game.player)||void 0===a||a.computeFov(),r.game.gameStatus=r.GameStatus.NEW_TURN})),s=()=>i(this,void 0,void 0,(function*(){r.game.save(),r.game.log.add("Game saved...",n.Colors.GAME_SAVED)})),l=()=>i(this,void 0,void 0,(function*(){r.game.log.add("Use item");const t=yield this.choseFromInventory(e);t?(yield(0,o.ensure)(t.pickable).use(t,e),r.game.gameStatus=r.GameStatus.NEW_TURN):r.game.log.add("Nevermind...")})),d=()=>i(this,void 0,void 0,(function*(){const t=yield this.choseFromInventory(e);t?(yield(0,o.ensure)(t.pickable).drop(t,e),r.game.gameStatus=r.GameStatus.NEW_TURN):r.game.log.add("Nevermind...")})),c=()=>i(this,void 0,void 0,(function*(){const t=yield this.choseFromInventory(e);t?(yield(0,o.ensure)(t.pickable).wear(t,e),r.game.gameStatus=r.GameStatus.NEW_TURN):r.game.log.add("Nevermind...")}));switch(t){case"S":s();break;case">":(null===(h=r.game.stairs)||void 0===h?void 0:h.x)===e.x&&(null===(u=r.game.stairs)||void 0===u?void 0:u.y)===e.y?r.game.nextLevel():r.game.log.add("There are no stairs here.");break;case"g":(()=>{r.game.gameStatus=r.GameStatus.NEW_TURN;let t=!1;for(const a of r.game.actors)if(a.pickable&&a.x===e.x&&a.y===e.y){if(a.pickable.pick(a,e)){t=!0,r.game.log.add(`You pick up the ${a.name}`,n.Colors.PICKED_UP);break}t||(t=!0,r.game.log.add("Your inventory is full.",n.Colors.INVENTORY_FULL))}t||r.game.log.add("There's nothing here that you can pick up.")})();break;case"i":yield l();break;case"d":yield d();break;case"o":yield a();break;case"w":yield c();break;case"f":(()=>{var e,t;null===(t=null===(e=r.game.player)||void 0===e?void 0:e.fov)||void 0===t||t.showAll(),r.game.saveImage()})()}var h,u}))}moveOrAttack(e,t,a){var s;return i(this,void 0,void 0,(function*(){if(null===(s=r.game.map)||void 0===s?void 0:s.isWall(t,a))return!1;let i=!1;for(const i of r.game.actors)if(i.destructible&&!i.destructible.isDead()&&i.x===t&&i.y===a)return yield(0,o.ensure)(e.attacker).attack(e,i),!1;for(const e of r.game.actors)(e.destructible&&e.destructible.isDead||e.pickable||"door"===e.name)&&e.x===t&&e.y===a&&r.game.log.add(`There is a ${e.name} here`),"door"===e.name&&e.blocks&&e.x===t&&e.y===a&&(i=!0);return!i&&(e.x=t,e.y=a,!0)}))}choseFromInventory(e){return i(this,void 0,void 0,(function*(){r.game.clear(),r.game.render(),e.container&&e.container.render();const t=(yield r.game.getch()).charCodeAt(0)-97;return t>=0&&t<(0,o.ensure)(e.container).inventory.length?(0,o.ensure)(e.container).inventory[t]:null}))}},t.MonsterAI=class extends c{constructor(){super(),this.TRACKING_TURNS=3,this.moveCount=0}update(e){var t,a;return i(this,void 0,void 0,(function*(){const i=r.game.player;e.destructible&&e.destructible.isDead()||!i||((null===(a=null===(t=r.game.player)||void 0===t?void 0:t.fov)||void 0===a?void 0:a.isInFov(e.x,e.y))?this.moveCount=this.TRACKING_TURNS:this.moveCount--,this.moveCount>0&&this.moveOrAttack(e,i.x,i.y))}))}moveOrAttack(e,t,a){var i,s,n,l;let d=t-e.x,c=a-e.y;const h=d>0?1:-1,u=c>0?1:-1,m=Math.sqrt(d*d+c*c);m>=2?(d=Math.round(d/m),c=Math.round(c/m),(null===(i=r.game.map)||void 0===i?void 0:i.canWalk(e.x+d,e.y+c))?(e.x+=(0,o.float2int)(d),e.y+=(0,o.float2int)(c)):(null===(s=r.game.map)||void 0===s?void 0:s.canWalk(e.x+h,e.y))?e.x+=(0,o.float2int)(h):(null===(n=r.game.map)||void 0===n?void 0:n.canWalk(e.x,e.y+u))&&(e.y+=(0,o.float2int)(u))):null===(l=null==e?void 0:e.attacker)||void 0===l||l.attack(e,(0,o.ensure)(r.game.player))}},t.ConfusedAI=class extends c{constructor(e,t){super(),this.nbTurns=e,this.oldAi=t}update(e){var a,s;return i(this,void 0,void 0,(function*(){const i=t.random.getInt(-1,1),o=t.random.getInt(-1,1);if(0!==i||0!==o){const t=e.x+i,n=e.y+o;if(null===(a=r.game.map)||void 0===a?void 0:a.canWalk(t,n))e.x=t,e.y=n;else{const a=r.game.getActor(t,n);a&&(null===(s=null==e?void 0:e.attacker)||void 0===s||s.attack(e,a))}}this.nbTurns--,this.nbTurns<=0&&(e.ai=this.oldAi)}))}};class h extends c{constructor(e){super(),this.nbTurns=e}update(e){return i(this,void 0,void 0,(function*(){this.nbTurns--,0===this.nbTurns&&(e.ai=this.oldAi)}))}applyTo(e){this.oldAi=e.ai,e.ai=this}}t.TemporaryAI=h,t.ConfusedMonsterAi=class extends h{constructor(e){super(e)}update(e){const a=Object.create(null,{update:{get:()=>super.update}});var s,o;return i(this,void 0,void 0,(function*(){const i=t.random.getInt(-1,1),n=t.random.getInt(-1,1);if(0!=i||0!=n){const t=e.x+i,a=e.y+n;if(null===(s=r.game.map)||void 0===s?void 0:s.canWalk(t,a))e.x=t,e.y=a;else{const i=r.game.getActor(t,a);i&&(null===(o=null==e?void 0:e.attacker)||void 0===o||o.attack(e,i))}}a.update.call(this,e)}))}}},107:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.PlayerDestructible=t.MonsterDestructible=void 0;const i=a(607),s=a(928),r=a(409);class o{constructor(e,t,a,i,s){this.maxHP=e,this.hp=this.maxHP,this.defense=t,this.corpseName=a,this.type=i,this.xp=s}isDead(){return this.hp<=0}heal(e){return this.hp+=e,this.hp>this.maxHP&&(e-=this.hp-this.maxHP,this.hp=this.maxHP),e}takeDamage(e,t){return this.hp-=t,this.hp<=0&&this.die(e),t}die(e){e.color=r.Colors.DEAD_BODY,e.name=this.corpseName,e.blocks=!1,i.game.sendToBack(e)}}t.default=o,t.MonsterDestructible=class extends o{constructor(e,t,a,i){super(e,t,a,"monster",i),this.xp=i}die(e){var t;i.game.log.add(`${e.name} is dead. You gain ${this.xp} xp`),(0,s.ensure)(null===(t=i.game.player)||void 0===t?void 0:t.destructible).xp+=this.xp,super.die(e)}},t.PlayerDestructible=class extends o{constructor(e,t,a){super(e,t,a,"player",0)}die(e){i.game.log.add("You died",r.Colors.DEFEAT),super.die(e),i.game.gameStatus=i.GameStatus.DEFEAT}}},409:function(e,t,a){var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.Colors=void 0;const s=i(a(260));t.Colors={BACKGROUND:s.default.ui_map_background,WALL:s.default.ui_wall,WALL_DARK:s.default.ui_wall_dark,DOOR:s.default.ui_door,HEALTHPOTION:s.default.pickup_healthpotion,NUTELLABUN:s.default.pickup_nutellabun,SCROLL_OF_LIGHTING:s.default.pickup_scroll_of_lightning,SCROLL_OF_FIREBALL:s.default.pickup_scroll_of_fireball,SCROLL_OF_CONFUSION:s.default.pickup_scroll_of_confusion,SCROLL_OF_MAP:s.default.pickup_scroll_of_map,ARMOR_ITEM:s.default.pickup_armor_item,WEAPON_ITEM:s.default.pickup_weapon_item,LEVEL_UP:s.default.ui_level_up,HEALED:s.default.ui_healed,MENU_CURSOR:s.default.ui_menu_cursor,GAME_SAVED:s.default.ui_game_saved,PICKED_UP:s.default.ui_picked_up,INVENTORY_FULL:s.default.ui_inventory_full,MENU_BORDER:s.default.ui_menu_border,ALLOWED:s.default.ui_allowed,DISALLOWED:s.default.ui_disallowed,HP_10_PERCENT:s.default.ui_hp_10_percent,HP_25_PERCENT:s.default.ui_hp_25_percent,HP_50_PERCENT:s.default.ui_hp_50_percent,HP_95_PERCENT:s.default.ui_hp_95_percent,HP_MAX:s.default.ui_hp_max,HERO:s.default.actor_hero,STAIRS:s.default.actor_stairs,PLAYER_ATTACK:s.default.log_player_attack,ENEMY_ATTACK:s.default.log_enemy_attack,DEAD_BODY:s.default.log_dead_body,DEFAULT_TEXT:s.default.log_default_text,HILIGHT_TEXT:s.default.log_hilight_text,DEFEAT:s.default.log_defeat}},928:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.dimmerColor=t.rgbToHex=t.hexToRGB=t.ensure=t.float2int=t.debugInit=t.printVersionContainer=t.populateVersion=t.paddedLogObject=void 0,t.paddedLogObject=e=>{const t=Object.keys(e).reduce(((e,t)=>t.length+3>e?t.length+3:e),0);console.log(Object.keys(e).map((a=>`${a.padEnd(t," ")}: ${e[a]}`)).join("\n"))},t.populateVersion=()=>"Commit ID: <span>42ee8a2</span> | Version: <span>v0.0.1.12a</span>",t.printVersionContainer=()=>{(0,t.ensure)(document.querySelector("#version")).innerHTML=(0,t.populateVersion)()},t.debugInit=()=>{(0,t.printVersionContainer)(),(0,t.paddedLogObject)({BUILD_DATE:"2021-11-08",BUILD_TIME:"14:15:23",BUILD_DATETIME:"2021-11-08T14:15:23.323Z",COMMIT_HASH:"42ee8a2",VERSION:"v0.0.1.12a"})},t.float2int=e=>e>>0,t.ensure=(e,t="This value was promised to be there.")=>{if(null==e)throw new TypeError(t);return e},t.hexToRGB=e=>{let t=0,a=0,i=0;return 4==e.length?(t=parseInt(`0x${e[1]}${e[1]}`,16),a=parseInt(`0x${e[2]}${e[2]}`,16),i=parseInt(`0x${e[3]}${e[3]}`,16)):7==e.length&&(t=parseInt(`0x${e[1]}${e[2]}`,16),a=parseInt(`0x${e[3]}${e[4]}`,16),i=parseInt(`0x${e[5]}${e[6]}`,16)),[t,a,i]},t.rgbToHex=(e,t,a)=>"#"+((1<<24)+(e<<16)+(t<<8)+a).toString(16).slice(1),t.dimmerColor=(e,a)=>{let[i,s,r]=(0,t.hexToRGB)(e);return i*=a,s*=a,r*=a,i<0&&(i=0),s<0&&(s=0),r<0&&(r=0),i>255&&(i=255),s>255&&(s=255),r>255&&(r=255),i=(0,t.float2int)(i),s=(0,t.float2int)(s),r=(0,t.float2int)(r),(0,t.rgbToHex)(i,s,r)}},5:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0});const i=a(607),s=a(928),r=a(409);class o{constructor(e,t){this.text=e,this.color=t}}t.default=class{constructor(){this.SIZE_OF_LOG=100,this.texts=[]}render(){let e=0,t=this.texts.length;t>10&&(t=10);for(let a=this.texts.length-16;a<this.texts.length;a++)a>=0&&(i.game.drawText(this.texts[a].text,1,i.game.height+3+e,(0,s.dimmerColor)(this.texts[a].color,.05*(20-t))),e++,t--)}add(e,t=r.Colors.DEFAULT_TEXT){this.texts.push(new o(e,t)),this.texts.length>this.SIZE_OF_LOG&&this.texts.splice(0,1)}}},865:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Menu=t.MenuItemCode=t.MenuItem=void 0;class a{constructor(){this.code=0,this.label=""}}var i;t.MenuItem=a,(i=t.MenuItemCode||(t.MenuItemCode={}))[i.NONE=0]="NONE",i[i.NEW_GAME=1]="NEW_GAME",i[i.CONTINUE=2]="CONTINUE",i[i.EXIT=3]="EXIT",i[i.CONSTITUTION=4]="CONSTITUTION",i[i.STRENGTH=5]="STRENGTH",i[i.AGILITY=6]="AGILITY",t.Menu=class{constructor(){this.items=[]}clear(){this.items&&this.items.length>0&&(this.items=[])}addItem(e,t){const i=new a;i.code=e,i.label=t,this.items.push(i)}}},451:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0});let a=0;t.default=class{constructor(){this.rnd=0}setSeed(e){a=e}calc(){a=(9301*a+49297)%233280,this.rnd=a/233280}getInt(e,t){return t=t||1,e=e||0,this.calc(),Math.floor(e+this.rnd*(t-e))}dice(e,t,a){let i=0;t++;for(let a=0;a<e;a++)i+=Number(this.getInt(1,t));return i+=+a,i<e&&(i=e),i}}},357:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default=class{constructor(e,t,a,i){this.x=e,this.y=t,this.w=a,this.h=i}GetHalfDimensionX(){return this.w/2}GetHalfDimensionY(){return this.h/2}GetCenterX(){return this.x+this.GetHalfDimensionX()}GetCenterY(){return this.y+this.GetHalfDimensionY()}}}},t={};function a(i){var s=t[i];if(void 0!==s)return s.exports;var r=t[i]={exports:{}};return e[i].call(r.exports,r,r.exports,a),r.exports}a.d=(e,t)=>{for(var i in t)a.o(t,i)&&!a.o(e,i)&&Object.defineProperty(e,i,{enumerable:!0,get:t[i]})},a.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),a.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},a(607)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,